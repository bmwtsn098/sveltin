<script lang="ts" context="module">
	import type { Load } from '@sveltejs/kit';
	import {
		ContentMetadata,
		ResourceContent,
		ResourceContentMaker
	} from '@sveltinio/widgets/types';

	export const load: Load = async ({ fetch }) => {
		const url = '/api/{{ .Config.GetAPIVersion }}/{{ .Name }}/{{ .Config.GetPublicAPIFilename }}'
		const res = await fetch(url);
		if (res.ok) {
			const data = await res.json();
			const resourceName = '{{ .Name }}';

			const itemsList: Array<ResourceContent> = [];
			data.forEach((element) => {
				const item = ResourceContentMaker.createWithValues(
					resourceName,
					<ContentMetadata>element,
					''
				);
				itemsList.push(item);
			});

			return {
				props: { resourceName, itemsList },
			};
		}
		return {
			status: res.status,
			error: new Error(`Ops! Something went wrong loading ${url}`)
		};
	}
</script>

<script lang="ts">
	import { website } from '$config/website.js';
	import { Card } from '@sveltinio/widgets';
	import orderBy from 'lodash-es/orderBy.js';

	export let resourceName: string;
	export let itemsList: Array<ResourceContent>;

	const sortedItemsList = orderBy(itemsList, (item) => item.metadata.created_at, ['desc']);
</script>

<svelte:head>
	<title>{resourceName} | {website.name}</title>
</svelte:head>

<section class="artifact-container">
	<div class="content">
		{#if sortedItemsList.length != 0 }
		<h1>All {resourceName}</h1>
		<div class="cards">
		{#each sortedItemsList as item }
			<Card {item} />
		{/each}
		</div>
		{:else}
		<h2 class="message warning">
			Nothing to show here! Create some content first and reload the page:
			<span><pre><code class="text-default">sveltin new content {{ .Name }}/getting-started</code></pre></span>
		</h2>
		{/if}
	</div>
</section>

<style>
	.cards {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		grid-gap: 1rem;
	}
</style>
