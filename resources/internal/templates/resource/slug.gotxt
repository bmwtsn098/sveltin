<script lang="ts" context="module">
   export const ssr = false;
   import type { Load } from '@sveltejs/kit';
   import { website } from '$config/website.js';
   import externals from '$config/externals.js';
   import { siteConfig } from '$lib/Env.js';

   import Ajv from 'ajv';
   import SchemaValidator  from '$lib/utils/schema_validator';
   import type { ContentItem, NavigationItem } from '$lib/interfaces';
   import { ContentItemSchema } from '$lib/schema';

   const ajv = new Ajv();
   const schemaValidator = new SchemaValidator(ajv);

   export const load: Load = async ({ params }) => {
		const { slug } = params;
      const url = '/api/{{ .Config.GetAPIVersion }}/{{ .Name }}/{{ .Config.GetPublicAPIFilename }}';
      const res = await fetch(url);

      if (res.ok) {
         const data = await res.json();
         const published = schemaValidator.validate<Array<ContentItem>>(ContentItemSchema, data);
         const itemIndex = published.findIndex((elem) => slug === elem.slug);
         const item = published[itemIndex];

         if (item) {
            const resourceName = '{{ .Name }}';
            const next: NavigationItem = {
					title: published[itemIndex - 1]?.title,
					slug: published[itemIndex - 1]?.slug
				};
				const previous: NavigationItem = {
					title: published[itemIndex + 1]?.title,
					slug: published[itemIndex + 1]?.slug
				};

            return {
               props: {
                  resourceName,
                  item,
                  next,
                  previous
               }
            };
         }

         return {
            status: 404,
            error: new Error(`Ops! What you are looking for does not exists`)
         };
      }

      return {
            status: res.status,
            error: new Error(`Ops! Something went wrong loading ${url}`)
         };
   };
</script>

<script lang="ts">
   import TOC from '$components/_TOC.svelte';
	import PrevNext from '$components/_PrevNext.svelte';

   export let item: ContentItem;
   export let resourceName: string;
   export let previous: NavigationItem;
	export let next: NavigationItem;
</script>

<svelte:head>
   <title>{item.title} - {website.title}</title>
   <meta property="og:type" content="article" />
   <meta property="og:title" content={item.title} />
   <meta property="og:url" content={siteConfig.baseURL} />
   <meta property="og:image" content="{siteConfig.baseURL}/{resourceName}/{item.slug}/{item.cover}" />
   <meta property="og:description" content={item.headline} />
   <meta property="article:author" content={item.author} />
   <meta property="article:published_time" content={item.date} />
</svelte:head>

<article class="artifact-container">
   <div class="content">
      <h1>{item.title}</h1>
      <h3>
         <time datetime={new Date(item.date).toISOString()} />
      </h3>
      <div>
         <div class="">
            <TOC resource={resourceName} slug={item.slug} headings={item.headings} withChildren={false} />
         </div>

         <div class="md-content">
            {@html item.html}
         </div>
      </div>
   </div>
   <PrevNext resource={resourceName} {previous} {next} />
</article>

<style>
	.md-content {
		@apply markdown-body;
	}
</style>
