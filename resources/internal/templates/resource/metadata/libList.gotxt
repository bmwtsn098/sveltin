{{ $resourceName := .Resource | ToVariableName | Capitalize }}
{{ $mdName := .Name | ToVariableName }}
import { groupedByMany } from '$lib/utils/collections.js';
import type { Metadata, MetadataItem } from '$lib/interfaces';
import { list } from './api{{ $resourceName }}';

export const all = async (): Promise<Metadata[]> => {
	const mdName = '{{ $mdName }}';
	const data = await list();
	const values = ['title', 'slug', 'headline'];
	const grouped = groupedByMany(mdName, data, values);

	const mList: Array<Metadata> = [];
	grouped.map((elem) => {
		const metadata: Metadata = {
			name: elem['name'],
			items: []
		};
		elem['items'].forEach((e: MetadataItem) => {
			metadata.items.push(e);
		});
		mList.push(metadata);
	});

	return mList;
};

export const groupedBy = async (slug: string): Promise<Metadata> => {
	const data = await all();
	const metadata = data.find((item) => {
		return item.name === slug;
	});

	if (metadata) {
		return metadata;
	}

	return undefined;
};
